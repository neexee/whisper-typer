#!/usr/bin/env python
import argparse
import contextlib
import logging
import os
import queue
import struct
import wave
from tempfile import NamedTemporaryFile
from threading import Thread

import whisper
from boombox import BoomBox
from pvrecorder import PvRecorder
from pynput import keyboard

START_SOUND = BoomBox("./on.wav")
STOP_SOUND = BoomBox("./off.wav")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(message)s")
logger = logging.getLogger("whisper-typer")


def parse_args():
    parser = argparse.ArgumentParser(description="Record speech and convert it to text")
    parser.add_argument(
        "--recording-hotkey",
        type=str,
        default="<f8>",
        help="A hotkey to start/stop recording. "
        "Use brackets <> for special keys, combine keys using + (default: <f8>)",
    )
    parser.add_argument(
        "--device",
        type=str,
        default="cuda",
        choices=["cuda", "cpu"],
        help="Device to run the model on (default: cuda)",
    )
    parser.add_argument(
        "--model",
        type=str,
        default="medium",
        choices=whisper.available_models(),
        help="Whisper model to use (default: medium)",
    )
    parser.add_argument("--play-sounds", action="store_true", help="Play sounds on recording start/stop")
    parser.add_argument(
        "--list-recording-devices",
        action="store_true",
        help="List recording devices and exit",
    )
    parser.add_argument(
        "--recording-device-index",
        type=int,
        default=len(PvRecorder.get_available_devices())-1,
        help="Index of the recording device to use (default: the last device)",
    )
    return parser.parse_args()


def main():
    args = parse_args()

    rec_devices = PvRecorder.get_available_devices()
    if args.list_recording_devices:
        print("Available recording devices:")
        for i, device in enumerate(rec_devices):
            print(f"{i}: {device}")
        return

    logger.info(f"Using {rec_devices[args.recording_device_index]} for recording")
    logger.info(f"Loading {args.model} model, it might take some time...")
    model = whisper.load_model(args.model, device=args.device)
    logger.info(f"Loaded {args.model} model")

    recordings = queue.Queue()  # Paths to recordings (.wav files)
    control_events = queue.Queue(maxsize=1)  # Start/stop recording events

    transcriber = Thread(target=recording_transcriber, args=(model, recordings))
    transcriber.start()

    recorder = Thread(
        target=speech_recorder,
        args=(
            recordings,
            control_events,
            args.play_sounds,
            args.recording_device_index,
        ),
    )
    recorder.start()

    rl = RecordControlListener(control_events, args.recording_hotkey)
    with keyboard.Listener(on_press=rl.on_press, on_release=rl.on_release) as listener:
        listener.join()
    # TODO: implement graceful shutdown
    recorder.join()
    transcriber.join()


def recording_transcriber(model: whisper.Whisper, recordings: queue.Queue):
    pykeyboard = keyboard.Controller()
    while True:
        with next_recording(recordings) as recording:
            result = model.transcribe(recording)
            text = str(result["text"])

            logger.info(f"Transcribed {text}")

            for s in text:
                with contextlib.suppress(Exception):
                    pykeyboard.type(s)

            # Alternatively, you print each element of the result
            # if you want to experiment wIth fUnny outpUts lOOKing lIke thIs.
            # for element in result["text"]:
            #    with contextlib.suppress(Exception):
            #        pykeyboard.type(f"{element}")


@contextlib.contextmanager
def next_recording(recordings: queue.Queue):
    recording = recordings.get()
    yield recording
    os.remove(recording)


def speech_recorder(
    recordings: queue.Queue,
    control_events: queue.Queue,
    play_sounds: bool,
    device_index: int,
):
    while True:
        control_events.get(block=True)
        recording_path = record_speech(control_events, play_sounds, device_index)
        recordings.put(recording_path)


def record_speech(control_events: queue.Queue, play_sounds: bool, device_index: int):
    recorder = PvRecorder(frame_length=128, device_index=device_index)

    logger.info("Start recording")
    if play_sounds:
        START_SOUND.play()

    recorder.start()
    frames = []
    while control_events.empty():
        frame = recorder.read()
        frames.extend(frame)
    control_events.get()
    recorder.stop()

    if play_sounds:
        STOP_SOUND.play()
    logger.info("Finish recording")

    return store_recording(frames)


def store_recording(frames: list):
    with NamedTemporaryFile(mode="wb", suffix=".wav", delete=False) as rec:
        wav = wave.open(rec, "wb")
        wav.setnchannels(1)
        wav.setsampwidth(2)
        wav.setframerate(16000)
        wav.setnframes(512)
        wav.writeframes(struct.pack("h" * len(frames), *frames))
        wav.close()
        return rec.name


class RecordControlListener:
    def __init__(self, control_events: queue.Queue, recording_hotkey: str):
        self._recording_control_events = control_events
        self._recording_toggle_combination = set(parse_hotkey(recording_hotkey))
        self._pressed_keys: set[keyboard.Key | keyboard.KeyCode] = set()

    def on_press(self, key: keyboard.Key | keyboard.KeyCode):
        if key in self._recording_toggle_combination:
            self._pressed_keys.add(key)
        else:
            self._pressed_keys.clear()

    def on_release(self, key: keyboard.Key | keyboard.KeyCode):
        if self._pressed_keys == self._recording_toggle_combination and key in self._pressed_keys:
            self._pressed_keys.remove(key)
            if not self._pressed_keys:
                with contextlib.suppress(queue.Full):
                    self._recording_control_events.put_nowait("Toggle recording")


# This is a fix for https://github.com/moses-palmer/pynput/issues/439
# In short, hotkeys involving f keys don't work out of the box with pynput.
FUNCTION_KEYS = {f"f{num}": getattr(keyboard.Key, f"f{num}") for num in range(1, 13)}


def parse_hotkey(keys: str):
    """Parses a key combination string.

    Key combination strings are sequences of key identifiers separated by
    ``'+'``. Key identifiers are either single characters representing a
    keyboard key, such as ``'a'``, or special key names identified by names
    enclosed by brackets, such as ``'<ctrl>'``.

    Keyboard keys are case-insensitive.

    :raises ValueError: if a part of the keys string is invalid, or if it
        contains multiple equal parts
    """

    def parse_part(part: str):
        if len(part) == 1:
            return keyboard.KeyCode.from_char(part.lower())

        if part in ["<>", ""] or (part[0], part[-1]) != ("<", ">"):
            raise ValueError(f"Invalid key combination part: '{part}'")

        p = part[1:-1]
        if p in FUNCTION_KEYS:
            return FUNCTION_KEYS[p]

        # We want to represent modifiers as Key instances, and all
        # other keys as KeyCodes
        try:
            key = keyboard.Key[p.lower()]
        except KeyError:
            return keyboard.KeyCode.from_vk(int(p))

        if key in keyboard._NORMAL_MODIFIERS.values():
            return key
        return keyboard.KeyCode.from_vk(key.value.vk)

    # Split the string and parse the individual parts
    raw_parts = list(keys.split("+"))
    parsed_parts = [parse_part(s) for s in raw_parts]

    # Ensure no duplicate parts
    if len(parsed_parts) != len(set(parsed_parts)):
        raise ValueError(f"Duplicate keys: {keys}")

    return parsed_parts


if __name__ == "__main__":
    main()
